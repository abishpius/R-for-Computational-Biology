#!/bin/usr/env Rscript

#Load the data
download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/wang_eset.RData", "wang_eset.RData")
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~cell.type) # Subset of the data
dds$cell.type #tissue information

#What tissue has the highest size factor
dds = estimateSizeFactors(dds)
dds$cell.type[ which.max(sizeFactors(dds)) ]

#Create a PCA
vsd = varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup="cell.type")

#Scatterplot matrix of some of the samples' transformed counts
rmeans <- rowMeans(assay(vsd)) # row mean of rlog-transformed data
idx <- c(1,2,10,7,8,9,12) # pick some samples for visualization
mat <- assay(vsd)[rmeans > 1,idx] # pull out a small matrix of rlog-transformed counts
colnames(mat) <- vsd$cell.type[idx] # name the columns of matrix by cell type
panel.sub <- function(x,y,...) points(cbind(x,y)[sample(length(x),1000),],...)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)  {
	usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(mat, asp=1, col=rgb(0,0,0,.3), lower.panel=panel.cor, upper.panel=panel.sub)

#Reload data
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~cell.type) # Subset of the data
dds$cell.type #tissue information
dds$type <- factor(ifelse(dds$cell.type %in% c("cerebellum","mixed.brain"),
                          "brain", "other"))
dds$type <- relevel(dds$type, "other")

#design of the DESeqDataSet
design(dds) <- ~ type
plotCounts(dds, idx, intgroup="type") #where idx is a number

#What is the ENSEMBL ID of the gene with the smallest adjusted p-value
dds = DESeq(dds)
res = results(dds)
rownames(res)[ which.min(res$padj) ]

#How many genes with adjusted p-value less than 0.1 have a positive LFC after threshold = 2
res2 = results(dds, lfcThreshold=2)
summary(res2)

#make normalized counts plots for the top 9 genes
par(mfrow=c(3,3))
for (i in 1:9) {
    plotCounts(dds, order(res$padj)[i], intgroup="type")
}
par(mfrow=c(1,1))

#Build a vector of the names of the top 20 genes by the test statistic (largest first). The test statistic is the LFC divided by its standard error, and uniquely determines the p-value. So this is the same as asking for the genes with the smallest p-value and positive LFC (so higher expression in brain).
top <- rownames(res)[head(order(res$stat, decreasing=TRUE), 20)]

#Use org.Hs.eg.db to determine the gene symbol of the top gene in this list
library(org.Hs.eg.db)                              
select(org.Hs.eg.db, keys=top, columns="SYMBOL", keytype="ENSEMBL")

#Use org.Hs.eg.db to determine the GENENAME of the top genes.
select(org.Hs.eg.db, keys=top, columns="GENENAME", keytype="ENSEMBL")

#Download the data
download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData", "bottomly_eset.RData")
load("bottomly_eset.RData")
library(Biobase)
#Build DESeqDataSet
count.matrix <- exprs(bottomly.eset)
col.data <- pData(bottomly.eset) 
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~strain)
dds$experiment.number <- factor(dds$experiment.number)
dds$lane.number <- factor(dds$lane.number)
dds <- estimateSizeFactors(dds)

#Plot the surrogate variables and color by the true batches
plot(svseq$sv[,1], svseq$sv[,2], col=dds$experiment.number, pch=16)
legend("bottom", levels(dds$experiment.number), pch=16, col=1:3)
text(svseq$sv[,1], svseq$sv[,2], 1:ncol(dds), pos=1)


#Build a DEXSeq dataset object
library("pasilla")
inDir <- system.file("extdata", package="pasilla", mustWork=TRUE)
countFiles <- list.files(inDir, pattern="fb.txt$", full.names=TRUE)    
flattenedFile <- list.files(inDir, pattern="gff$", full.names=TRUE) 

sampleTable <- data.frame(
  row.names = c("treated1", "treated2", "treated3",
                "untreated1", "untreated2", "untreated3", "untreated4"), 
  condition = c("knockdown", "knockdown", "knockdown", 
                "control", "control", "control", "control"))                 

library("DEXSeq")  
dxd <- DEXSeqDataSetFromHTSeq(countFiles, sampleData=sampleTable, 
                              design= ~ sample + exon + condition:exon, 
                              flattenedfile=flattenedFile)

rmean <- rowMeans(counts(dxd))
dxd2L <- dxd[seqnames(rowRanges(dxd)) == "chr2L" & rmean > 10,] 
dxd2L <- dxd2L[1:1000,] 

#What is the name of the gene containing the exon with the smallest adjusted p-value for differntial exon usage?
dxd2L = estimateSizeFactors( dxd2L )                                                                
dxd2L = estimateDispersions( dxd2L )                                                                
dxd2L = testForDEU( dxd2L )                                                                         
dxd2L = estimateExonFoldChanges( dxd2L, fitExpToVar="condition")                                    
dxr = DEXSeqResults( dxd2L )                                                                        
rownames(dxr)[ which.min(dxr$padj) ] 
